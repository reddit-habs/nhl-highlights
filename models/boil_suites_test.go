// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Games", testGames)
}

func TestDelete(t *testing.T) {
	t.Run("Games", testGamesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Games", testGamesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Games", testGamesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Games", testGamesExists)
}

func TestFind(t *testing.T) {
	t.Run("Games", testGamesFind)
}

func TestBind(t *testing.T) {
	t.Run("Games", testGamesBind)
}

func TestOne(t *testing.T) {
	t.Run("Games", testGamesOne)
}

func TestAll(t *testing.T) {
	t.Run("Games", testGamesAll)
}

func TestCount(t *testing.T) {
	t.Run("Games", testGamesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Games", testGamesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Games", testGamesInsert)
	t.Run("Games", testGamesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Games", testGamesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Games", testGamesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Games", testGamesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Games", testGamesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Games", testGamesSliceUpdateAll)
}
